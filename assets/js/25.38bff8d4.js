(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{407:function(t,e,a){"use strict";a.r(e);var s=a(45),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"objective-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objective-configuration"}},[t._v("#")]),t._v(" Objective Configuration")]),t._v(" "),a("p",[t._v("Configuration properties for your objective are editable in "),a("code",[t._v("levels/<level_name>/objectives/<objective_name>/objective.json")]),t._v(". Here is a breakdown of all the components of "),a("code",[t._v("objective.json")]),t._v(":")]),t._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("h3",{attrs:{id:"title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#title"}},[t._v("#")]),t._v(" title")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("String")])])]),t._v(" "),a("p",[t._v("This text is played at the top of the Hack Interface when the objective is opened.")]),t._v(" "),a("h3",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" description")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("String")])])]),t._v(" "),a("p",[t._v("This text is showed on the first page of the Hack Interface. It is intended to give the player a small bit of context about this objective. HTML elements are allowed in this string like "),a("code",[t._v("<strong>")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"validation-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validation-fields"}},[t._v("#")]),t._v(" validation_fields")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("Array<ValidationField>")])])]),t._v(" "),a("p",[t._v("This is a list of the user input fields a player will have access to. They're used to pass information into a "),a("code",[t._v("validator.js")]),t._v(" file so that player's input can be validated as part of the objective validation process. Even objectives that have no need for player input should make use of the "),a("code",[t._v("prompt")]),t._v(" type.")]),t._v(" "),a("h4",{attrs:{id:"validationfield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#validationfield"}},[t._v("#")]),t._v(" ValidationField")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("Object")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("name (String)")]),t._v(": this maps to the "),a("code",[t._v("name")]),t._v(" property of the underlying HTML element.")]),t._v(" "),a("li",[a("code",[t._v("type (String)")]),t._v(": this picks the type of field to be created, it can be "),a("code",[t._v("prompt")]),t._v(", "),a("code",[t._v("textarea")]),t._v(", or any other "),a("code",[t._v("type")]),t._v(" assignable to an HTML "),a("code",[t._v("input")]),t._v(" element.")]),t._v(" "),a("li",[a("code",[t._v("placeholder (String)")]),t._v(": the placeholder value that appears in your input before players have applied input.")]),t._v(" "),a("li",[a("code",[t._v("label (String)")]),t._v(": the label placed above your input in the UI")])])])]),t._v(" "),a("p",[t._v("This represents a set of information used to created inputs for the player to pass information into a validator. Some of these tags map to underlying HTML values, others do not.")]),t._v(" "),a("h3",{attrs:{id:"show-ide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-ide"}},[t._v("#")]),t._v(" show_ide "),a("Badge",{attrs:{text:"deprecated",type:"warning"}})],1),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("Boolean")])])]),t._v(" "),a("p",[t._v("Should this objective allow the player to open up the integrated QuestIDE.")]),t._v(" "),a("h3",{attrs:{id:"rewards"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rewards"}},[t._v("#")]),t._v(" rewards")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("Object")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("xp (Number)")]),t._v(": an integer to be added to the player's current XP total upon objective completion")]),t._v(" "),a("li",[a("code",[t._v("items Array<ItemKey>")]),t._v(": a list of items to be added to the player's inventory upon objective completion")])])])]),t._v(" "),a("p",[t._v("This is an object that describes the experience and item rewards that a player receives if they pa the validation for this objective.")]),t._v(" "),a("h4",{attrs:{id:"itemkey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#itemkey"}},[t._v("#")]),t._v(" ItemKey")]),t._v(" "),a("ul",[a("li",[t._v("type: "),a("code",[t._v("String")])])]),t._v(" "),a("p",[t._v("This is a string corresponding to one of the item keys in the game. An item key is derived from the name of the folder that contains the item's information and image assets.")]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[a("code",[t._v("levels/fog_owl/objectives/owl_plant_tree1/objective.json")])]),t._v(" "),a("div",{staticClass:"language-JSON extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fog Owl: Plant a Tree!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"description"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Playing TwilioQuest supports reforestation in Australia. Click <strong>HACK</strong>, and Twilio will donate a dollar to plant a tree!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"validation_fields"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prompt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prompt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"placeholder"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"label"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Click HACK to plant a tree."')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"show_ide"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rewards"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"xp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);